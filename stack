class Node:
    def __init__(self, data=None, next=None):
        self.data=data
        self.next=next

class Queue:

    def __init__(self):
        self.first=None
        self.last=None
        self.size=0

    def push(self, elem):
        node= Node(elem)
        if self.last is None:
            self.last=node

        else:
            self.last.next=node
            self.last=node

        if self.first is None:
            self.first=node
        self.size+=1

    def pop(self):
        if self.size>0:
            self.first=self.first.next
            self.size-=1
        else:
            return IndexError

    def size(self):
        return self.size

    def is_empty(self):
        if self.size==0:
            return True
        else:
            return False


    def imprime(self):
        pointer = self.first
        for c in range(self.size):
            print(pointer.data)
            pointer = pointer.next


# def get_distances(A, x):
#      n = len(A)
#      dist = [-1]*n
#      q = Queue()
#      dist[x] = 0
#      q.push(x)
#      while(not q.is_empty()):
#          y = q.pop()
#          for i in range(n):
#              if A[y][i] == 1 and dist[i] == -1:
#                  dist[i] = dist[y] + 1
#                  q.push(i)
#      return dist
#     A = [
#      [0, 0, 1, 1, 1, 0],
#      [0, 0, 0, 0, 0, 1],
#      [0, 1, 0, 0, 1, 0],
#      [0, 0, 0, 0, 1, 1],
#      [0, 1, 0, 0, 0, 1],
#      [0, 1, 0, 0, 0, 0]
#     ]
# start_node = 0
# dist = get_distances(A, start_node)
# print(dist)
