class Node:
    def __init__(self,data):
        self.data=data
        self.right=None
        self.left=None

    def __str__(self):
        return str(self.data)

class BinaryTree:
    def __init__(self,data=None):
        if data:
            node=Node(data)
            self.root=node
        else:
            self.root=None


    def raiz(self,expressao):
        lista = []
        listaindices = []
        aux=[]
        for item in (expressao):
            lista.append(item)
            if item=="*" or item=="/":
                aux.append(item)

        for indice, item in enumerate(expressao):
            if item == "-" or item == "+":
                listaindices.append(indice)
        if len(listaindices) == 0 and len(aux)>0:
            return len(expressao)-2
        if len(listaindices)>0:
            indiceraiz = max(listaindices)
            return indiceraiz
        else:
            return 0


    def recursao(self,expressao):
        raiz=self.raiz(expressao)
        filhoesq = (expressao[0:raiz])
        filhodir = (expressao[raiz + 1:len(expressao)])
        print(filhoesq)
        print(filhodir)
        if len(filhoesq)==1:
             return expressao
        else:
             return self.recursao(filhoesq)


a=BinaryTree()
a.recursao("A*B+B-C/A*B")
